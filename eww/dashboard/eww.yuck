;; **
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; ** Converted by : @tripleo1
;; **

;; ** Variables ***********************************************************************

;; Profile vars
(defvar IMAGE "/usr/share/sddm/faces/ishaan.face.icon")
(defvar NAME "Ishaan Gupta")
(defvar UNAME "ishaan")

;; System vars
(defvar HOST "IshaanPC")
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll VOLUME :interval "1s" `amixer get Master | grep -o '[0-9]*%' | head -1 | tr -d '%'`)

(defpoll UPDATES :interval "1m" `TOTAL=$(($(checkupdates | wc -l) + $(flatpak remote-ls --updates | tail -n +2 | wc -l))); if [ $TOTAL -gt 0 ]; then echo "Updates Available"; else echo "No Updates Available"; fi`)

;; Time vars
(defpoll HOUR :interval "5s" `date +\"%I\"`)
(defpoll MIN  :interval "5s" `date +\"%M\"`)
(defpoll MER  :interval "5s" `date +\"%p\"`)
(defpoll DAY  :interval "5s" `date +\"%A\"`)

;; Uptime vars
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'`)
(defpoll UPMIN  :interval "5s" `uptime -p | awk '{print $4 \" \" $5}'`)

;; Music vars
(defpoll SONG    :interval "1s" `scripts/music_info --song`)
(defpoll ARTIST  :interval "1s" `scripts/music_info --artist`)
(defpoll STATUS  :interval "1s" `scripts/music_info --status`)
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER   :interval "1s" `scripts/music_info --cover`)
(defpoll CTIME   :interval "1s" `scripts/music_info --ctime`)
(defpoll TTIME   :interval "1s" `scripts/music_info --ttime`)

;; Weather vars
(defpoll ICON   :interval "5m" `scripts/weather_info --icon`)
(defpoll STAT   :interval "5m" `scripts/weather_info --stat`)
(defpoll TEMP   :interval "5m" `scripts/weather_info --temp`)
(defpoll HEX    :interval "5m" `scripts/weather_info --hex`)
(defpoll QUOTE  :interval "5m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "5m" `scripts/weather_info --quote2`)


;; Files vars
(defpoll FREE :interval "5s" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)


;; ** Widgets *************************************************************************

;; background
(defwidget bg []
  (box :class "bg")
)

;; profile
(defwidget user []
  (box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
    (label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
    (label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)
  )
)

;; system
(defwidget system []
  (box :class "genwin" :vexpand "false" :hexpand "false"
    (box :orientation "v" :spacing 20 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconcpu" :text "î¥")
        (scale :min 0 :max 100 :value CPU_USAGE :active "false"))
      (box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconmem" :text "î¦¹")
        (scale :min 0 :max 100 :value MEM_USAGE :active "false"))
      (box :class "vol_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconvolume" :text "ï€¨")


        (scale :min 0 :max 100 :value VOLUME :active "false"))

      (button
        :class "update_bar"
        :onclick "scripts/open_links --update"
        (box :orientation "h" :spacing 20 :halign "center" :valign "center"
        (label :class "iconupdate" :text "")
        (label :class "labelupdate" :halign "center" :valign "center" :text UPDATES)))




    )
  )
)

;; clock
(defwidget clock []
  (box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false"
    (box :orientation "h" :spacing 0
      (label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
      (label :class "time_min"  :valign "end"   :wrap "true" :limit-width 25 :text MIN))
    (box :orientation "v" :spacing 0
      (label :class "time_mer" :valign "start" :halign "end" :wrap "true" :limit-width 25 :text MER)
      (label :class "time_day" :valign "end"   :halign "end" :wrap "true" :limit-width 25 :text DAY))
  )
)

;; uptime
(defwidget uptime []
  (box :class "genwin"
    (box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :class "icontimer" :valign "center" :text "ï¨š")
      (box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
        (label :class "upmin"  :halign "start" :wrap "true" :limit-width 25 :text UPMIN))
    )
  )
)

;; Music
(defwidget music []
  (box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
    (box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :halign "center" :class "song"   :wrap "true" :limit-width 20 :text SONG)
      (label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
      (box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false"
        (button :class "btn_prev" :onclick "scripts/music_info --prev"   "ï¦­")
        (button :class "btn_play" :onclick "scripts/music_info --toggle" STATUS)
        (button :class "btn_next" :onclick "scripts/music_info --next"   "ï¦¬"))
      (box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false"
        (scale :onscroll "mpc -q seek +1" :min 0 :active "true" :max 100 :value CURRENT))
    )
  )
)

;; github
(defwidget github []
  (box :class "github" :vexpand "false" :hexpand "false"
    (button :class "iconweb" :onclick "scripts/open_links --gh" "ïž£"))
)

;; reddit
(defwidget reddit []
  (box :class "reddit" :vexpand "false" :hexpand "false"
    (button :class "iconweb" :onclick "scripts/open_links --rd" "ï¥Œ"))
)
;; perplexity (crisp SVG render)
(defwidget perplexity []
  (box :class "perplexity" :vexpand "false" :hexpand "false"
    (button :hexpand "true" :vexpand "true" :halign "center" :valign "center" :onclick "scripts/open_links --pr"
      (image :path "/home/ishaan/.config/eww/dashboard/images/perplexity.svg"
             :image-width 80
             :image-height 80
             :preserve-aspect-ratio "true"
             :halign "center"
             :valign "center"))))


;; youtube
(defwidget youtube []
  (box :class "youtube" :vexpand "false" :hexpand "false"
    (button :class "iconweb" :onclick "scripts/open_links --yt" "ï…ª"))
)

;; mail (icon-only tile, same size as others)
(defwidget mail []
  (box :class "mail" :vexpand "false" :hexpand "false"
    (button :class "iconmail" :onclick "scripts/open_links --mail" "ïžª")))
	
;; google (SVG icon tile)
(defwidget google []
  (box :class "google" :vexpand "false" :hexpand "false"
    (button :hexpand "true" :vexpand "true" :halign "center" :valign "center" :onclick "scripts/open_links --google"
      (image :path "/home/ishaan/.config/eww/dashboard/images/google.svg"
             :image-width 80
             :image-height 80
             :preserve-aspect-ratio "true"
             :halign "center"
             :valign "center"))))



;; weather
(defwidget weather []
  (box :class "genwin"
    (box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :orientation "h" :vexpand "false" :hexpand "false"
        (label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
        (label :class "label_temp"  :halign "end"   :text TEMP))
      (box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "label_stat"  :text STAT)
        (label :class "label_quote" :text QUOTE)
        (label :class "label_quote" :text QUOTE2))
    )
  )
)

;; apps (center each row)
(defwidget apps []
  (box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :halign "center"
    (box :class "appbox" :orientation "h" :spacing 8 :space-evenly "true" :vexpand "false" :hexpand "true" :halign "center"
      (button :style "background-image: url('images/icons/firefox.svg');"  :class "app_fox"      :onclick "scripts/open_apps --ff")
      (button :style "background-image: url('images/icons/notepadqq.svg');" :class "app_notepadqq" :onclick "scripts/open_apps --nq")
      (button :style "background-image: url('images/icons/blender.svg');"  :class "app_blender"  :onclick "scripts/open_apps --bl"))
    (box :class "appbox" :orientation "h" :spacing 8 :space-evenly "true" :vexpand "false" :hexpand "true" :halign "center"
      (button :style "background-image: url('images/icons/terminal.svg');" :class "app_terminal" :onclick "scripts/open_apps --tr")
      (button :style "background-image: url('images/icons/files.svg');"    :class "app_files"    :onclick "scripts/open_apps --fm")
      (button :style "background-image: url('images/icons/metasploit.svg');"    :class "app_metasploit"    :onclick "scripts/open_apps --ms"))
    (box :class "appbox" :orientation "h" :spacing 8 :space-evenly "true" :vexpand "false" :hexpand "true" :halign "center"
      (button :style "background-image: url('images/icons/code.svg');"       :class "app_code" :onclick "scripts/open_apps --cd")
      (button :style "background-image: url('images/icons/burp.svg');"       :class "app_burp" :onclick "scripts/open_apps --burp")
      (button :style "background-image: url('images/icons/boxes.svg');" :class "app_boxes" :onclick "scripts/open_apps --boxes"))
  )
)

;; power buttons
(defwidget logout []
  (box :class "genwin" :vexpand "false" :hexpand "false"
    (button :class "btn_logout" :onclick "notify-send \"Dashboard Widget Closed.\" && pkill eww" "î¦‘"))
)
(defwidget sleep []
  (box :class "genwin" :vexpand "false" :hexpand "false"
    (button :class "btn_sleep" :onclick "hyprlock & systemctl suspend" "î¦£"))
)
(defwidget reboot []
  (box :class "genwin" :vexpand "false" :hexpand "false"
    (button :class "btn_reboot" :onclick "systemctl reboot" "î§„"))
)
(defwidget poweroff []
  (box :class "genwin" :vexpand "false" :hexpand "false"
    (button :class "btn_poweroff" :onclick "systemctl poweroff" "î§€"))
)

;; folders
(defwidget folders []
  (box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :space-evenly "false" :vexpand "false" :hexpand "false"
        (button :class "hddicon" :onclick "scripts/open_apps --fm" "ïŸ‰")
        (label  :class "fs_sep"  :text "|"))
      (box :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE)))
	(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder0" :onclick "scripts/open_folders --home" "ó±‚µ")
      (button :class "label_folder0" :onclick "scripts/open_folders --home" "Home"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder1" :onclick "scripts/open_folders --docs" "ïŠ")
      (button :class "label_folder1" :onclick "scripts/open_folders --docs" "Documents"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder2" :onclick "scripts/open_folders --dl" "ïŒ")
      (button :class "label_folder2" :onclick "scripts/open_folders --dl" "Downloads"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder3" :onclick "scripts/open_folders --music" "ïŠ")
      (button :class "label_folder3" :onclick "scripts/open_folders --music" "Music"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder4" :onclick "scripts/open_folders --pics" "ïŽ")
      (button :class "label_folder4" :onclick "scripts/open_folders --pics" "Pictures"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder5" :onclick "scripts/open_folders --cfg" "ï®›")
      (button :class "label_folder5" :onclick "scripts/open_folders --cfg" "~/.config"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder6" :onclick "scripts/open_folders --local" "ï®›")
      (button :class "label_folder6" :onclick "scripts/open_folders --local" "~/.local/share"))
  )
)


;; ** Windows *************************************************************************

;; background (fit screen)
(defwindow background :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 0 :y 0 :width "100%" :height "100%")
  (bg)
)

;; profile
(defwindow profile :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 107 :y 107 :width 249 :height 313)
  (user)
)

;; system
(defwindow system :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 107 :y 431 :width 249 :height 231)
  (system)
)

;; clock
(defwindow clock :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 366 :y 107 :width 249 :height 110)
  (clock)
)

;; uptime
(defwindow uptime :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 366 :y 227 :width 249 :height 110)
  (uptime)
)

;; music
(defwindow music :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 366 :y 349 :width 434 :height 199)
  (music)
)

;; github
(defwindow github :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 366 :y 558 :width 100 :height 103)
  (github)
)

;; reddit
(defwindow reddit :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 477 :y 558 :width 100 :height 103)
  (reddit)
)

;; perplexity
(defwindow perplexity :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 589 :y 558 :width 100 :height 103)
  (perplexity)
)

;; youtube
(defwindow youtube :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 699 :y 558 :width 101 :height 103)
  (youtube)
)

;; weather
(defwindow weather :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 626 :y 107 :width 391 :height 231)
  (weather)
)

;; apps
(defwindow apps :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 811 :y 349 :width 206 :height 199)
  (apps)
)

;; mail 
(defwindow mail :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 811 :y 558 :width 100 :height 103)
  (mail)
)

;; google
(defwindow google :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 922 :y 558 :width 100 :height 103)
  (google)
)

;; logout
(defwindow logout :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 1028 :y 107 :width 110 :height 110)
  (logout)
)

;; sleep
(defwindow sleep :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 1148 :y 107 :width 110 :height 110)
  (sleep)
)

;; reboot
(defwindow reboot :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 1028 :y 227 :width 110 :height 110)
  (reboot)
)

;; poweroff
(defwindow poweroff :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 1148 :y 227 :width 110 :height 110)
  (poweroff)
)

;; folders
(defwindow folders :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x 1028 :y 349 :width 231 :height 313)
  (folders)
)

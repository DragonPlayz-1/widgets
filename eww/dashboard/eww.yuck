;; **
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; ** Converted by : @tripleo1
;; ** Customized for UNIVERSAL resolution support
;; **

;; ** Variables ***********************************************************************

;; Profile vars
(defpoll IMAGE :interval "0" `echo "/usr/share/sddm/faces/$(whoami).face.icon"`)
(defvar NAME "YOUR NAME")
(defpoll UNAME :interval "5m" `whoami`)

;; System vars
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll VOLUME :interval "1s" `amixer get Master | grep -o '[0-9]*%' | head -1 | tr -d '%'`)
(defpoll UPDATES :interval "1m" `TOTAL=$(($(checkupdates | wc -l) + $(flatpak remote-ls --updates | tail -n +2 | wc -l))); if [ $TOTAL -gt 0 ]; then echo "Updates Available"; else echo "No Updates Available"; fi`)

;; Time vars
(defpoll HOUR :interval "5s" `date +\"%I\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)
(defpoll MER :interval "5s" `date +\"%p\"`)
(defpoll DAY :interval "5s" `date +\"%A\"`)

;; Uptime vars
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 " " $3}' | sed 's/,//g'`)
(defpoll UPMIN :interval "5s" `uptime -p | awk '{print $4 " " $5}'`)

;; Music vars
(defpoll SONG :interval "1s" `scripts/music_info --song`)
(defpoll ARTIST :interval "1s" `scripts/music_info --artist`)
(defpoll STATUS :interval "1s" `scripts/music_info --status`)
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll CTIME :interval "1s" `scripts/music_info --ctime`)
(defpoll TTIME :interval "1s" `scripts/music_info --ttime`)

;; Weather vars
(defpoll ICON :interval "5m" `scripts/weather_info --icon`)
(defpoll STAT :interval "5m" `scripts/weather_info --stat`)
(defpoll TEMP :interval "5m" `scripts/weather_info --temp`)
(defpoll HEX :interval "5m" `scripts/weather_info --hex`)
(defpoll QUOTE :interval "5m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "5m" `scripts/weather_info --quote2`)

;; Files vars
(defpoll FREE :interval "5s" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)

;; ** Widgets *************************************************************************

;; background
(defwidget bg []
	(box :class "bg")
)

;; profile
(defwidget user []
	(box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
		(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)
	)
)

;; system
(defwidget system []
	(box :class "genwin" :vexpand "false" :hexpand "false"
		(box :orientation "v" :spacing 20 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "iconcpu" :text "")
				(scale :min 0 :max 100 :value CPU_USAGE :active "false"))
			(box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "iconmem" :text "")
				(scale :min 0 :max 100 :value MEM_USAGE :active "false"))
			(box :class "vol_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "iconvolume" :text "")
				(scale :min 0 :max 100 :value VOLUME :active "false"))
			(button
				:class "update_bar"
				:onclick "scripts/open_links --update"
				(box :orientation "h" :spacing 20 :halign "center" :valign "center"
					(label :class "iconupdate" :text "")
					(label :class "labelupdate" :halign "center" :valign "center" :text UPDATES)))
		)
	)
)

;; clock
(defwidget clock []
	(box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false"
		(box :orientation "h" :spacing 0
			(label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
			(label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN))
		(box :orientation "v" :spacing 0
			(label :class "time_mer" :valign "start" :halign "end" :wrap "true" :limit-width 25 :text MER)
			(label :class "time_day" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DAY))
	)
)

;; uptime
(defwidget uptime []
	(box :class "genwin"
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false"
			(label :class "icontimer" :valign "center" :text "祥")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN))
		)
	)
)

;; Music
(defwidget music []
	(box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false"
				(button :class "btn_prev" :onclick "scripts/music_info --prev" "玲")
				(button :class "btn_play" :onclick "scripts/music_info --toggle" STATUS)
				(button :class "btn_next" :onclick "scripts/music_info --next" "怜"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false"
				(scale :onscroll "mpc -q seek +1" :min 0 :active "true" :max 100 :value CURRENT))
		)
	)
)

;; github
(defwidget github []
	(box :class "github" :vexpand "false" :hexpand "false"
		(button :class "iconweb" :onclick "scripts/open_links --gh" ""))
)

;; reddit
(defwidget reddit []
	(box :class "reddit" :vexpand "false" :hexpand "false"
		(button :class "iconweb" :onclick "scripts/open_links --rd" "樓"))
)

;; perplexity (crisp SVG render)
(defwidget perplexity []
	(box :class "perplexity" :vexpand "false" :hexpand "false"
		(button :hexpand "true" :vexpand "true" :halign "center" :valign "center" :onclick "scripts/open_links --pr"
			(image :path "~/.config/eww/dashboard/images/perplexity.svg"
				:image-width 80
				:image-height 80
				:preserve-aspect-ratio "true"
				:halign "center"
				:valign "center")))
)

;; youtube
(defwidget youtube []
	(box :class "youtube" :vexpand "false" :hexpand "false"
		(button :class "iconweb" :onclick "scripts/open_links --yt" ""))
)

;; mail (icon-only tile, same size as others)
(defwidget mail []
	(box :class "mail" :vexpand "false" :hexpand "false"
		(button :class "iconmail" :onclick "scripts/open_links --mail" ""))
)

;; google (SVG icon tile)
(defwidget google []
	(box :class "google" :vexpand "false" :hexpand "false"
		(button :hexpand "true" :vexpand "true" :halign "center" :valign "center" :onclick "scripts/open_links --google"
			(image :path "~/.config/eww/dashboard/images/google.svg"
				:image-width 80
				:image-height 80
				:preserve-aspect-ratio "true"
				:halign "center"
				:valign "center")))
)

;; weather
(defwidget weather []
	(box :class "genwin"
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :orientation "h" :vexpand "false" :hexpand "false"
				(label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
				(label :class "label_temp" :halign "end" :text TEMP))
			(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "label_stat" :text STAT)
				(label :class "label_quote" :text QUOTE)
				(label :class "label_quote" :text QUOTE2))
		)
	)
)

;; apps (center each row)
(defwidget apps []
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :halign "center"
		(box :class "appbox" :orientation "h" :spacing 8 :space-evenly "true" :vexpand "false" :hexpand "true" :halign "center"
			(button :style "background-image: url('images/icons/firefox.svg');" :class "app_fox" :onclick "scripts/open_apps --ff")
			(button :style "background-image: url('images/icons/notepadqq.svg');" :class "app_notepadqq" :onclick "scripts/open_apps --nq")
			(button :style "background-image: url('images/icons/blender.svg');" :class "app_blender" :onclick "scripts/open_apps --bl"))
		(box :class "appbox" :orientation "h" :spacing 8 :space-evenly "true" :vexpand "false" :hexpand "true" :halign "center"
			(button :style "background-image: url('images/icons/terminal.svg');" :class "app_terminal" :onclick "scripts/open_apps --tr")
			(button :style "background-image: url('images/icons/files.svg');" :class "app_files" :onclick "scripts/open_apps --fm")
			(button :style "background-image: url('images/icons/metasploit.svg');" :class "app_metasploit" :onclick "scripts/open_apps --ms"))
		(box :class "appbox" :orientation "h" :spacing 8 :space-evenly "true" :vexpand "false" :hexpand "true" :halign "center"
			(button :style "background-image: url('images/icons/code.svg');" :class "app_code" :onclick "scripts/open_apps --cd")
			(button :style "background-image: url('images/icons/burp.svg');" :class "app_burp" :onclick "scripts/open_apps --burp")
			(button :style "background-image: url('images/icons/boxes.svg');" :class "app_boxes" :onclick "scripts/open_apps --boxes"))
	)
)

;; power buttons
(defwidget logout []
	(box :class "genwin" :vexpand "false" :hexpand "false"
		(button :class "btn_logout" :onclick "notify-send \"Dashboard Widget Closed.\" && pkill eww" ""))
)

(defwidget sleep []
	(box :class "genwin" :vexpand "false" :hexpand "false"
		(button :class "btn_sleep" :onclick "hyprlock & systemctl suspend" ""))
)

(defwidget reboot []
	(box :class "genwin" :vexpand "false" :hexpand "false"
		(button :class "btn_reboot" :onclick "systemctl reboot" ""))
)

(defwidget poweroff []
	(box :class "genwin" :vexpand "false" :hexpand "false"
		(button :class "btn_poweroff" :onclick "systemctl poweroff" ""))
)

;; folders
(defwidget folders []
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :class "hddicon" :onclick "scripts/open_apps --fm" "")
				(label :class "fs_sep" :text "|"))
			(box :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE)))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(button :class "iconfolder0" :onclick "scripts/open_folders --home" "")
			(button :class "label_folder0" :onclick "scripts/open_folders --home" "Home"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(button :class "iconfolder1" :onclick "scripts/open_folders --docs" "")
			(button :class "label_folder1" :onclick "scripts/open_folders --docs" "Documents"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(button :class "iconfolder2" :onclick "scripts/open_folders --dl" "")
			(button :class "label_folder2" :onclick "scripts/open_folders --dl" "Downloads"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(button :class "iconfolder3" :onclick "scripts/open_folders --music" "")
			(button :class "label_folder3" :onclick "scripts/open_folders --music" "Music"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(button :class "iconfolder4" :onclick "scripts/open_folders --pics" "")
			(button :class "label_folder4" :onclick "scripts/open_folders --pics" "Pictures"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(button :class "iconfolder5" :onclick "scripts/open_folders --cfg" "ﮛ")
			(button :class "label_folder5" :onclick "scripts/open_folders --cfg" "~/.config"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(button :class "iconfolder6" :onclick "scripts/open_folders --local" "ﮛ")
			(button :class "label_folder6" :onclick "scripts/open_folders --local" "~/.local/share"))
	)
)

;; ** Windows *************************************************************************
;; ** UNIVERSAL RESOLUTION - Uses percentage-based positioning
;; ** Works on ANY screen resolution automatically
;; ** Includes :monitor 0 to prevent "Failed to get primary monitor from GTK" error

;; background (full screen)
(defwindow background :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "0%" :y "0%" :width "100%" :height "100%")
	(bg)
)

;; profile (top-left)
(defwindow profile :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "5.5%" :y "14%" :width "18%" :height "41%")
	(user)
)

;; system (below profile)
(defwindow system :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "5.5%" :y "56%" :width "18%" :height "30%")
	(system)
)

;; clock (top-center-left)
(defwindow clock :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "27%" :y "14%" :width "18%" :height "14.5%")
	(clock)
)

;; uptime (below clock)
(defwindow uptime :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "27%" :y "30%" :width "18%" :height "14.5%")
	(uptime)
)

;; music (center)
(defwindow music :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "27%" :y "45.5%" :width "32%" :height "26%")
	(music)
)

;; github (bottom row, 1st)
(defwindow github :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "27%" :y "73%" :width "7.5%" :height "13.5%")
	(github)
)

;; reddit (bottom row, 2nd)
(defwindow reddit :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "35%" :y "73%" :width "7.5%" :height "13.5%")
	(reddit)
)

;; perplexity (bottom row, 3rd)
(defwindow perplexity :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "43.5%" :y "73%" :width "7.5%" :height "13.5%")
	(perplexity)
)

;; youtube (bottom row, 4th)
(defwindow youtube :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "51.5%" :y "73%" :width "7.5%" :height "13.5%")
	(youtube)
)

;; weather (top-center-right)
(defwindow weather :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "46%" :y "14%" :width "28.5%" :height "30%")
	(weather)
)

;; apps (center-right)
(defwindow apps :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "59.5%" :y "45.5%" :width "15%" :height "26%")
	(apps)
)

;; mail (bottom row, 5th)
(defwindow mail :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "59.5%" :y "73%" :width "7.5%" :height "13.5%")
	(mail)
)

;; google (bottom row, 6th)
(defwindow google :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "67.5%" :y "73%" :width "7.5%" :height "13.5%")
	(google)
)

;; logout (top-right, 1st)
(defwindow logout :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "75.5%" :y "14%" :width "8%" :height "14.5%")
	(logout)
)

;; sleep (top-right, 2nd)
(defwindow sleep :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "84%" :y "14%" :width "8%" :height "14.5%")
	(sleep)
)

;; reboot (top-right, 3rd)
(defwindow reboot :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "75.5%" :y "30%" :width "8%" :height "14.5%")
	(reboot)
)

;; poweroff (top-right, 4th)
(defwindow poweroff :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "84%" :y "30%" :width "8%" :height "14.5%")
	(poweroff)
)

;; folders (right side)
(defwindow folders :stacking "fg" :focusable "false" :monitor 0
	:geometry (geometry :x "75.5%" :y "45.5%" :width "17%" :height "41%")
	(folders)
)
